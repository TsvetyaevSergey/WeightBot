# -*- coding: utf-8 -*-
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from config import TIMEZONE
from storage import Storage
import logging
log = logging.getLogger("scheduler")

REMINDER_TEXT = (
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üåÖ\n"
    "–ü–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å –Ω–∞—Ç–æ—â–∞–∫. –ù–∞–∂–º–∏—Ç–µ ¬´–í–Ω–µ—Å—Ç–∏ –≤–µ—Å¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 82.4)."
)

def setup_scheduler(bot: Bot, storage: Storage) -> AsyncIOScheduler:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    –í 08:00 Europe/Amsterdam —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–æ–∏–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    """
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)

    import logging
    log = logging.getLogger("scheduler")

    # ...
    async def morning_broadcast():
        users = storage.get_registered_users()
        for _, info in users.items():
            tg_id = info.get("telegram_id")
            if tg_id:
                try:
                    await bot.send_message(chat_id=tg_id, text=REMINDER_TEXT)
                    log.info("Reminder sent to %s", tg_id)
                except Exception as e:
                    log.exception("Reminder failed to %s: %s", tg_id, e)

    scheduler.add_job(
        morning_broadcast,
        trigger=CronTrigger(hour=8, minute=0, timezone=TIMEZONE),
        id="daily_reminder",
        replace_existing=True,
    )
    scheduler.start()
    return scheduler
