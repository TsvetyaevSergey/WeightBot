# -*- coding: utf-8 -*-
from dotenv import load_dotenv
load_dotenv()
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, USERS, TIMEZONE
from keyboards import registration_kb, main_menu_kb, edit_choose_kb
from storage import Storage
from charts import build_weight_chart
from scheduler import setup_scheduler


# --- FSM –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞ ---
class WeightForm(StatesGroup):
    waiting_for_weight = State()
    editing_wait_value = State()   # NEW


storage = Storage()

async def on_startup(bot: Bot):
    setup_scheduler(bot, storage)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    if storage.is_registered(message.from_user.id):
        user_key = storage.get_user_key_by_tg(message.from_user.id)
        name = USERS.get(user_key, "–£—á–∞—Å—Ç–Ω–∏–∫")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n–ì–æ—Ç–æ–≤ –∫ –∑–∞–º–µ—Ä–∞–º?",
            reply_markup=main_menu_kb()
        )
    else:
        await message.answer(
            "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –¥–ª—è –¥—É—ç–ª–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞ –º–µ–∂–¥—É –°–µ–º—ë–Ω–æ–º –∏ –°–µ—Ä–∂–∞–Ω—Ç–æ–º.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=registration_kb()
        )

async def register_cb(call: CallbackQuery):
    await call.answer()
    if not call.data or ":" not in call.data:
        return
    _, user_key = call.data.split(":", 1)
    ok, msg = storage.register(user_key=user_key, tg_id=call.from_user.id)
    if ok:
        await call.message.edit_text(msg)
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    else:
        await call.message.answer(f"‚ùó {msg}")

async def add_weight_entry(message: Message, state: FSMContext):
    if not storage.is_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return
    await state.set_state(WeightForm.waiting_for_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 82.4):")

async def weight_input(message: Message, state: FSMContext):
    # –≤—ã—á–∏—Å–ª—è–µ–º "—Å–µ–≥–æ–¥–Ω—è" –ø–æ –ú–°–ö
    today_msk = datetime.now(TIMEZONE).date().isoformat()

    text = (message.text or "").replace(",", ".").strip()
    try:
        value = float(text)
        if value <= 0 or value > 500:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 82.4")
        return

    user_key = storage.get_user_key_by_tg(message.from_user.id)

    ok, msg = storage.add_weight(user_key, value, on_date=today_msk)
    if not ok:
        await message.answer(f"‚ùó {msg}\n–ï—Å–ª–∏ –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏¬ª.")
        return

    await state.clear()
    await message.answer(msg, reply_markup=main_menu_kb())


async def show_results(message: Message):
    if not storage.is_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return

    img_path = build_weight_chart(storage.get_all_weights(), storage.get_start_date())
    await message.answer_photo(
        photo=FSInputFile(img_path),
        caption="–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìà"
    )

# --- –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ /weight 82.4 ---
async def weight_cmd(message: Message, state: FSMContext):
    if not storage.is_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return

    parts = (message.text or "").split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weight 82.4")
        return

    text = parts[1].replace(",", ".").strip()
    try:
        value = float(text)
        if value <= 0 or value > 500:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 82.4")
        return

    today_msk = datetime.now(TIMEZONE).date().isoformat()
    user_key = storage.get_user_key_by_tg(message.from_user.id)
    ok, msg = storage.add_weight(user_key, value, on_date=today_msk)
    if not ok:
        await message.answer(f"‚ùó {msg}\n–ï—Å–ª–∏ –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏¬ª.")
        return

    await state.clear()
    await message.answer(msg, reply_markup=main_menu_kb())

async def open_edit_menu(message: Message, state: FSMContext):
    if not storage.is_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return
    user_key = storage.get_user_key_by_tg(message.from_user.id)
    last_entries = storage.get_user_last_entries(user_key, n=4)
    if not last_entries:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4):",
        reply_markup=edit_choose_kb(last_entries)
    )

async def edit_pick_cb(call: CallbackQuery, state: FSMContext):
    await call.answer()
    if not call.data or ":" not in call.data:
        return
    _, idx_str = call.data.split(":", 1)
    try:
        global_index = int(idx_str)
    except ValueError:
        return
    # –ó–∞–ø–æ–º–Ω–∏–º, –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    await state.update_data(edit_global_index=global_index)
    await state.set_state(WeightForm.editing_wait_value)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–∫–≥), –Ω–∞–ø—Ä–∏–º–µ—Ä 82.1:")

async def edit_apply_value(message: Message, state: FSMContext):
    text = (message.text or "").replace(",", ".").strip()
    try:
        value = float(text)
        if value <= 0 or value > 500:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 82.1")
        return

    data = await state.get_data()
    global_index = data.get("edit_global_index")
    if global_index is None:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    storage.update_weight_by_index(global_index, value)
    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. ‚úÖ", reply_markup=main_menu_kb())


def register_routes(dp: Dispatcher):
    dp.message.register(start_cmd, CommandStart())
    dp.callback_query.register(register_cb, F.data.startswith("register:"))

    dp.message.register(add_weight_entry, F.text == "‚ûï –í–Ω–µ—Å—Ç–∏ –≤–µ—Å")
    dp.message.register(show_results,  F.text == "üìà –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    dp.message.register(open_edit_menu, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")  # NEW

    dp.callback_query.register(edit_pick_cb, F.data.startswith("editpick:"))  # NEW
    dp.message.register(edit_apply_value, WeightForm.editing_wait_value)      # NEW

    dp.message.register(weight_cmd, Command("weight"))
    dp.message.register(weight_input, WeightForm.waiting_for_weight)


async def main():
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    register_routes(dp)
    await on_startup(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
